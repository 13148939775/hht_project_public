<?xml version="1.0"?>

<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.1.1/rti_dds_qos_profiles.xsd">

    <qos_library name="RequestReplyExampleProfiles">

        <!-- Default QoS:
             
             This profile contains the QoS that Requesters and Repliers 
             would use by default. We can use it as a base profile to inherit
             from and override some parameters 
         -->

        <qos_profile name="default" is_default_qos="true" base_name="BuiltinQosLib::Generic.Common">
            <datawriter_qos>
                <!-- <resource_limits>
                    <max_samples>2500</max_samples>
                    <max_instances>50</max_instances>
                    <max_samples_per_instance>50</max_samples_per_instance>
                    <initial_samples>50</initial_samples>
                    <initial_instances>25</initial_instances>
                </resource_limits> -->

                <!-- writer可靠性配置 -->
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                    <max_blocking_time>
                        <sec>10</sec>
                        <nanosec>0</nanosec>
                    </max_blocking_time>
                </reliability>

                <history>
                    <kind>DDS_KEEP_LAST_HISTORY_QOS</kind>
                    <!-- <depth>20</depth> -->
                </history>

                <!-- These are typical protocol parameters for a reliable
                     DataWriter -->
                <protocol>
                    <rtps_reliable_writer>
                        <max_heartbeat_retries>
                            LENGTH_UNLIMITED
                        </max_heartbeat_retries>
                        <heartbeats_per_max_samples>
                            2
                        </heartbeats_per_max_samples>
                        <heartbeat_period>
                            <sec>0</sec>
                            <nanosec>100000000</nanosec>                            <!--100ms -->
                        </heartbeat_period>
                        <fast_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>10000000</nanosec>                            <!--10ms -->
                        </fast_heartbeat_period>
                        <late_joiner_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>10000000</nanosec>                            <!--10ms -->
                        </late_joiner_heartbeat_period>
                        <max_nack_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_nack_response_delay>
                        <min_nack_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_nack_response_delay>
                        <max_send_window_size>32</max_send_window_size>
                        <min_send_window_size>32</min_send_window_size>
                    </rtps_reliable_writer>
                </protocol>

                <writer_resource_limits>
                    <!-- This setting enables efficient communication
                         between a replier and an arbitrary number of requesters 
                     -->
                    <max_remote_reader_filters>
                        LENGTH_UNLIMITED
                    </max_remote_reader_filters>
                </writer_resource_limits>

                <!--异步发送-->
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>DEFAULT_FLOW_CONTROLLER_NAME</flow_controller_name>
                </publish_mode>
            </datawriter_qos>

            <datareader_qos>
                <!-- <resource_limits>
                    <max_samples>2500</max_samples>
                    <max_instances>50</max_instances>
                    <max_samples_per_instance>50</max_samples_per_instance>
                    <initial_samples>50</initial_samples>
                    <initial_instances>25</initial_instances>
                </resource_limits> -->

                <!-- reader可靠性配置 -->
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                    <max_blocking_time>
                        <sec>10</sec>
                        <nanosec>0</nanosec>
                    </max_blocking_time>
                </reliability>
                <!--历史记录配置-->
                <history>
                    <kind>DDS_KEEP_LAST_HISTORY_QOS</kind>
                    <!-- <depth>20</depth> -->
                </history>


                <!-- These are typical protocol parameters for a reliable
                     DataReader -->
                <protocol>
                    <rtps_reliable_reader>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>
            </datareader_qos>

            <domain_participant_qos>
                <!--数据传输方式配置-包含服务发现和数据传输-->
                <transport_builtin>
                    <mask>UDPv4</mask>
                    <!--指定当前主机允许使用的网络接口IP,多网卡情况可以使用-->
                    <!--
                    <udpv4>
                        <allow_interface_list>
                            <element>127.0.0.1</element>
                        </allow_interface_list>
                    </udpv4>
                   -->
                </transport_builtin>

                <!--指定发现的IP地址-->
                <!--<discovery>
                    <inital_peers>
                        <element>127.0.0.1</element>
                    </inital_peers>
                </discovery>
                -->

                <!--服务发现配置-->
                <discovery_config>
                    <publication_writer_publish_mode>
                        <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    </publication_writer_publish_mode>
                    <subscription_writer_publish_mode>
                        <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    </subscription_writer_publish_mode>

                    <!-- 配置6.1.1版本关闭Client端的程序后，Server端仍然在等待CLient端发回的用于确认“回复消息在Client端已收到”的ACKNACK包，但是此时由于CLient已被关闭所以无法发出这个ACKNACK数据包，导致Server端等待超时 -->
                    <participant_liveliness_assert_period>
                        <sec>3</sec>
                        <nanosec>DURATION_ZERO_NSEC</nanosec>
                    </participant_liveliness_assert_period>
                    <participant_liveliness_lease_duration>
                        <sec>10</sec>
                        <nanosec>DURATION_ZERO_NSEC</nanosec>
                    </participant_liveliness_lease_duration>
                    <max_liveliness_loss_detection_period>
                        <sec>2</sec>
                        <nanosec>DURATION_ZERO_NSEC</nanosec>
                    </max_liveliness_loss_detection_period>

                </discovery_config>

                <property>
                    <value>
                        <element>
                            <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
                            <value>65507</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                            <value>26214400</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                            <value>26214400</value>
                        </element>

                        <!--monitor配置-->
                        <!-- <element>
                            <name>rti.monitor.library</name>
                            <value>rtimonitoring</value>
                        </element>
                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
                        </element>
                        <element>
                            <name>rti.monitor.config.publish_period</name>
                            <value>1</value>
                        </element> -->
                    </value>
                </property>
            </domain_participant_qos>
        </qos_profile>

        <!-- This is the profile used by the Requester. 
             It inherits from "default", defined above, 
             and overrides some QoS -->
        <qos_profile name="RequesterExampleProfile" base_name="default">
            <!-- QoS for the data writer that sends requests -->
            <datawriter_qos>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
            </datawriter_qos>

            <!-- QoS for the data reader that receives replies -->
            <datareader_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
            </datareader_qos>
        </qos_profile>

        <!-- This is the profile used by the Replier. 
             It inherits from "default", defined above, 
             and overrides some QoS -->
        <qos_profile name="ReplierExampleProfile" base_name="default">
            <!-- QoS for the data writer that sends replies -->
            <datawriter_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
            </datawriter_qos>

            <!-- QoS for the data reader that receives requests -->
            <datareader_qos>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
            </datareader_qos>
        </qos_profile>
    </qos_library>
</dds>
